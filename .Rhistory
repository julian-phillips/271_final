linDet <- 10 + 0.5 * (1:length(d))
rw1 <- cumsum(d)
rwd <- 0.5 + d
rw2 <- cumsum(rwd)
plot.ts(rw2, xlab = "Simulated Time Period", ylab = "Simulated Values", main = "Random Walk With and Without Drift and Linear Model Simulation", col = "blue")
lines(rw1, col = "purple")
lines(linDet, col = "green", lty = "dashed")
rands <- rnorm(500, 0, 1)
randWalk2 <- cumsum(rands)
summary(randWalk2)
sd(randWalk2)
mean()
mean(randWalk2)
str(randWalk)
str(randWalk2)
?plot
plot.ts(randWalk2)
plot.ts(randWalk2, xlab = "Simulated Time Period", ylab = "Simulated Random Walk Values", main = "Random Walk with No Drift Time Series", col = "blue")
?plot.ts
acf(randWalk2)
title("Correlogram for Random Walk with No Drift Model")
acf(randWalk2, main = "Correlogram for Random Walk with No Drift")
pacf(randWalk2, main = "Partial Autocorrelation for Random Walk with No Drift")
getwd()
?polyroot
polyroot(0.95)
polyroot(c(0.95))
polyroot(c(0.8, 0.3))
polyroot(c(1, 0.95))
polyroot(c(1, 0.8, 0.3))
polyroot(c(1, -0.5, 0.5))
polyroot(c(1, 1, 0.4))
polyroot(c(1, -0.5, -0.25))
getwd()
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
acf(x, main="")
acf(arfit$resid[3:100], main="Autocorrelation of Time Series Residuals")
arfit <- ar(x, method = "ols")
polyroot(arfit$ar)
arfit <- ar(x, method = "ols")
arfit
acf(arfit$resid[3:100], main="Autocorrelation of Time Series Residuals")
hist(arfit$resid)
plot.ts(arfit$resid, main="Simulated Random Noise Time Series",col="blue", ylab="Values", xlab="Simulated Time Period")
qqPlot(arfit$resid, main="QQ Plot of Residuals", ylab="Residuals")
series ,- read.table("series.csv", quote = "\"", comment.car = "")
series= read.table("series.csv", quote = "\"", comment.car = "")
series <- read.table("~/Documents/Lab2/series.csv", quote="\"", comment.char="")
ind = seq(from = 1, to = 75)
df = data.frame(ind,series)
arfit <- ar(df$V1, method = "ols")
arfit$asy.var
arfit <- ar(df$V1, method = "yw")
arfit$asy.var
arfit <- ar(df$V1, method = "mle")
ts = ggplot(df, aes(x=ind, y=V1)) + geom_line() + ggtitle("Time Series")+ scale_x_continuous("Series") + scale_y_continuous("Value")
library(ggplot)
library(ggplot2)
ts = ggplot(df, aes(x=ind, y=V1)) + geom_line() + ggtitle("Time Series")+ scale_x_continuous("Series") + scale_y_continuous("Value")
ts
arfit$asy.var.coef
arfit$asy.var
arfit <- ar(df$V1, method = "ols")
arfit$asy.var.coef
arfit$asy.var.se
arfit$asy.se
arfit <- ar(df$V1, method = "mle")
arfit$asy.se
arfit$asy.var.coef
arfit
sqrt(arfit$asy.var)
arfit <- ar(df$V1, method = "yw")
sqrt(arfit$asy.var)
arfit$asy.var[1,2]
arfit <- ar(df$V1, method = "mle")
arfit$asy.var[1,2]
arfit$asy.var
arfit$asy.var[2,2]
set.seed(898)
x3 <- arima.sim(n = 1000, list(ar = c(1.5, -.9), ma=0))
x3.arfit <- ar(x3, method = "mle") #AR estimates a series of AR models up to order 12 (by default)
x3.arfit$aic   # AICs of the fit models
sqrt(x3.arfit$asy.var) # asy. standard error
set.seed(898)
x3 <- arima.sim(n = 1000, list(ar = c(1.5, -.9), ma=0))
x3.arfit <- ar(x3, method = "mle") #AR estimates a series of AR models up to order 12 (by default)
sqrt(x3.arfit$asy.var) # asy. standard error
x3.arfit$asy.var
x3.arfit$ar + c(-2,2)*sqrt(x3.arfit$asy.var)
library(astsa)    # Time series package by Shummway and Stoffer
library(zoo)      # time series package
library(forecast)
library(quantmod) # Financial time series package
install.packages("quantmod")
library(quantmod)
theta = seq(-2,2,0.01)
rho = theta/(1+theta^2)
plot(theta, rho, xlab=expression(~~~theta),
ylab=expression(~~~theta/(1+theta^2)),
main = "Theoretical ACF of MA(1)")
set.seed(898)
ma1a <- arima.sim(list(order=c(0,0,1), ma=.9), n=100)
set.seed(898)
ma1b <- arima.sim(list(order=c(0,0,1), ma=-.9), n=100)
set.seed(898)
ma1c <- arima.sim(list(order=c(0,0,1), ma=.5), n=100)
set.seed(898)
ma1d <- arima.sim(list(order=c(0,0,1), ma=-.5), n=100)
str(ma1a)
hist(ma1a, ylab="value", main=(expression(MA(1)~~~theta==+.9)))
hist(ma1b, ylab="x", main=(expression(MA(1)~~~theta==-.9)))
hist(ma1c, ylab="x", main=(expression(MA(1)~~~theta==+.5)))
hist(ma1d, ylab="x", main=(expression(MA(1)~~~theta==-.5)))
plot(ma1a, ylab="value", main=(expression(MA(1)~~~theta==+.9)))
plot(ma1b, ylab="x", main=(expression(MA(1)~~~theta==-.9)))
plot(ma1c, ylab="x", main=(expression(MA(1)~~~theta==+.5)))
plot(ma1d, ylab="x", main=(expression(MA(1)~~~theta==-.5)))
par(mfrow(c(2,2)))
par(mfrow=c(2,2))
acf(ma1a,main="Fig1: ACF of MA1(ma=0.9)")
acf(ma1b,main="Fig2: ACF of MA1(ma=-0.9)")
acf(ma1c,main="Fig3: ACF of MA1(ma=0.5)")
acf(ma1d,main="Fig4: ACF of MA1(ma=-0.5)")
par(mfrow=c(2,2))
pacf(ma1a,main="Fig1: PACF of MA1(ma=0.9)")
pacf(ma1b,main="Fig2: PACF of MA1(ma=-0.9)")
pacf(ma1c,main="Fig3: PACF of MA1(ma=0.5)")
pacf(ma1d,main="Fig4: PACF of MA1(ma=-0.5)")
rm(list = ls())
set.seed(898)
ma2a1 <- arima.sim(list(order=c(0,0,2), ma=c(0.9,  0.4)), n=100)
set.seed(898)
ma2a2 <- arima.sim(list(order=c(0,0,2), ma=c(0.9, -0.4)), n=100)
set.seed(898)
ma2b1 <- arima.sim(list(order=c(0,0,2), ma=c(-.9, 0.4)), n=100)
set.seed(898)
ma2b2 <- arima.sim(list(order=c(0,0,2), ma=c(-.9, -0.4)), n=100)
set.seed(898)
ma2c1 <- arima.sim(list(order=c(0,0,2), ma=c(0.5, 0.4)), n=100)
set.seed(898)
ma2c2 <- arima.sim(list(order=c(0,0,2), ma=c(0.5, -0.4)), n=100)
set.seed(898)
ma2d1 <- arima.sim(list(order=c(0,0,2), ma=c(-0.5, 0.4)), n=100)
set.seed(898)
ma2d2 <- arima.sim(list(order=c(0,0,2), ma=c(-0.5, -0.4)), n=100)
?arima.sim
par(mfrow = c(2,2))
plot(ma2a1, ylab="simulated value", main="MA2(0.9, 0,4)")
plot(ma2a2, ylab="simulated value", main="MA2(0.9,-0.4)")
plot(ma2b1, ylab="simulated value", main="MA2(-0.9,0.4)")
plot(ma2b2, ylab="simulated value", main="MA2(-0.9,-0.4)")
par(mfrow=c(3,2))
plot(ma1a,  ylab="simulated value", main=(expression(MA(1)~~~theta==+.9)))
acf(ma1a,  ylab="Autocorrelation", main="ACF of MA1(0.9)")
plot(ma2a1, ylab="simulated value", main="MA2(0.9, 0,4)")
acf(ma2a1, ylab="Autocorrelation", main="ACF of MA2(0.9, 0,4)")
plot(ma2a2, ylab="simulated value", main="MA2(0.9,-0.4)")
acf(ma2a2, ylab="Autocorrelation value", main="ACF MA2(0.9,-0.4)")
par(mfrow=c(2,2))
plot(ma2c2, ylab="simulated value", main="MA2(0.5,-0.4)")
hist(ma2c2, col="grey", ylab="simulated value", main="MA2(0.5,-0.4)")
acf(ma2c2, ylab="simulated value", main="MA2(0.5,-0.4)")
pacf(ma2c2, ylab="simulated value", main="MA2(0.5,-0.4)")
rm(list = ls())
ma2.fit <- arima(ma2c2, order=c(0,0,2))
set.seed(898)
ma2c2 <- arima.sim(list(order=c(0,0,2), ma=c(0.5, -0.4)), n=100)
ma2.fit <- arima(ma2c2, order=c(0,0,2))
summary(ma2.fit)
head(cbind(ma2c2, fitted(ma2.fit), ma2.fit$resid),10)
df<-data.frame(cbind(ma2c2, fitted(ma2.fit), ma2.fit$resid))
library(stargazer)
stargazer(df, type="text")
summary(ma2.fit$resid)
par(mfrow=c(2,2))
plot.ts(ma2.fit$resid, main="Residual Series",
ylab="residuals", col="navy")
hist(ma2.fit$resid, col="gray", main="Residuals")
acf(ma2.fit$resid, main="ACF of Residuals")
pacf(ma2.fit$resid, main="PACF of Residuals")
Box.test(ma2.fit$resid, type="Ljung-Box") # Box-Pierce test
set.seed(898)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
acf(x, main="")
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
acf(x, main="")
title("Autocorrelation of Time Series")
pacf(x, main="")
title("Partial Autocorrelation of Time Series")
arfit <- ar(x, method = "mle")
arfit$order
arfit$ar
sqrt(arfit$asy.var.coef)
CI <- arfit$ar + c(-2, 2) * sqrt(arfit$asy.var.coef)
polyroot(arfit$ar)
polyroot(c(1,-1,-0.4))
polyroot(c(1.0,0.5,0.25))
acf(arfit$resid[3:100], main="Autocorrelation of Time Series Residuals")
set.seed(898)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
arfit <- ar(x)
arfit$order
arfit$ar
arfit <- ar(x, method = "yw")
arfit$ar
arfit <- ar(x, method = "osl")
arfit <- ar(x, method = "ols")
arfit$order
arfit$ar
arfit <- ar(x, method = "mle", order = c(2, 0, 0))
?ar
set.seed(898)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
arfit$resid
arfit <- ar(x, method = "mle")
arfit$resid
arfit2 <- ar(x, method = "ols")
arfit2$resid
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
arfit <- ar(x, method = "mle")
arfit
set.seed(100)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
acf(x, main="")
pacf(x, main="")
arfit <- ar(x, method = "ols")
arfit$order
set.seed(100)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
set.seed(10)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
set.seed(150)
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
set.seed(100)
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
set.seed(100)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
acf(x, main="")
title("Partial Autocorrelation of Time Series")
pacf(x, main="")
acf(x, main="")
arfit <- ar(x, method = "mle")
arfit$order
arfit$ar
set.seed(100)
set.seed(100)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
arfit <- ar(x, method = "mle")
arfit$order
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
set.seed(200)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
acf(x, main="")
pacf(x, main="")
arfit <- ar(x, method = "mle")
arfit$order
set.seed(898)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
arfit <- ar(x, method = "mle")
arfit$order
set.seed(100)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
acf(x, main="")
arfit <- ar(x, method = "mle")
arfit$order
arfit2 <- ar(x, method = "ols")
arfit2$oorder
arfit2$order
arfit3 <- ar(x, method = "yw")
arfit3$order
arfit$ar
sqrt(arfit$asy.var.coef)
arfit$ar + c(-2, 2) * sqrt(arfit$asy.var.coef)
5/6
set.seed(898)
x2 <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma = 0))
arfit2 <- ar(x2, method = "mle")
arfit2$order
arfit$ar
arfit2$ar
sqrt(arfit$asy.var.coef)
sqrt(arfit2$asy.var.coef)
polyroot(c(1, -arfit$ar))
arfit$aic
arfit$resid
acf(arfit$resid[2:100], main="Autocorrelation of Time Series Residuals")
hist(arfit$resid)
plot.ts(arfit$resid, main="Simulated Random Noise Time Series",col="blue", ylab="Values", xlab="Simulated Time #Period")
qqPlot(arfit$resid, main="QQ Plot of Residuals", ylab="Residuals")
library(ggplot2)
library(gridExtra)
library(grid)
library(car)
qqPlot(arfit$resid, main="QQ Plot of Residuals", ylab="Residuals")
#Autocorrelation Function of Residuals
acf(arfit$resid[2:100], main="Autocorrelation of Time Series Residuals")
#Histogram of Residuals
hist(arfit$resid)
#Time Series of Residuals
plot.ts(arfit$resid, main="Simulated Random Noise Time Series",col="blue", ylab="Values", xlab="Simulated Time #Period")
#QQ Plot of residuals
qqPlot(arfit$resid, main="QQ Plot of Residuals", ylab="Residuals")
resids <- arfit$resid[2:100] #subsetting to remove NA
acf(resids, main="Autocorrelation of Time Series Residuals")
hist(arfit$resids)
hist(resids)
par(mfrow = c(2,2))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
resids <- arfit$resid[2:100] #subsetting to remove NA
par(mfrow = c(2,2))
#Autocorrelation Function of Residuals
acf(resids, main="Autocorrelation of Time Series Residuals")
#Partial Autocorrelation Function of Residuals
pacf(resids, main = "Partial Autocorrelation of Time Series Residuals")
par(mfrow = c(2,2))
#Histogram of Residuals
hist(resids)
#QQ Plot of residuals
qqPlot(resids, main="QQ Plot of Residuals", ylab="Residuals")
par(mfrow = c(1,2))
#Histogram of Residuals
hist(resids)
#QQ Plot of residuals
qqPlot(resids, main="QQ Plot of Residuals", ylab="Residuals")
#Time Series of Residuals
par(mfrow = c(1,2))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
#Time Series of Residuals
par(mfrow = c(2,1))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
par(mfrow = c(2,1))
#Histogram of Residuals
hist(resids)
#QQ Plot of residuals
qqPlot(resids, main="QQ Plot of Residuals", ylab="Residuals")
resids <- arfit$resid[2:100] #subsetting to remove NA
par(mfrow = c(2,1))
#Autocorrelation Function of Residuals
acf(resids, main="Autocorrelation of Time Series Residuals")
#Partial Autocorrelation Function of Residuals
pacf(resids, main = "Partial Autocorrelation of Time Series Residuals")
#Time Series of Residuals
par(mfrow = c(2,1))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
par(mfrow = c(1,1))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
par(mfrow = c(2,2))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
par(mfrow = c(1,2))
acf(resids, main="Autocorrelation of Time Series Residuals")
par(mfrow = c(2,1))
acf(resids, main="Autocorrelation of Time Series Residuals")
pacf(resids, main = "Partial Autocorrelation of Time Series Residuals")
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
hist(resids, main = "Histogram of TS Residuals")
qqPlot(resids, main="QQ Plot of Residuals", ylab="Residuals")
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
par(mfrow = c(2,1))
acf(resids, main="Autocorrelation of Time Series Residuals")
#Partial Autocorrelation Function of Residuals
pacf(resids, main = "Partial Autocorrelation of Time Series Residuals")
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
hist(resids, main = "Histogram of TS Residuals")
#QQ Plot of residuals
qqPlot(resids, main="QQ Plot of Residuals", ylab="Residuals")
qqnorm(resids)
par(mfrow = c(1,1))
qqnorm(resids)
CI <- arfit$ar + c(-2, 2) * sqrt(arfit$asy.var.coef)
CI
5/6
-1/6
polyroot(c(1, -arfit$ar))
arfit
setwd("~/Documents/271 Final")
library(ggplot2)
library(reshape2)
library(astsa)
library(forecast)
data <- read.csv("houseValueData.csv")
data$withWater <- as.factor(data$withWater) #changed to factor based on documentation
ggplot(melt(data[,-3]), aes(value)) + geom_histogram(color = "black", fill = "white") + facet_wrap(~variable, scales = "free") + labs(title = "Histogram of Variables")
sd(data$homeValue)
model1 <- lm(homeValue ~ crimeRate_pc + nonRetailBusiness + ageHouse + distanceToCity + distanceToHighway + pupilTeacherRatio + pctLowIncome + pollutionIndex + nBedRooms + withWater, data = data)
model1
summary(model1)
plot(model1)
ggplot(melt(data[,-3]), aes(value)) + geom_histogram(color = "black", fill = "white") + facet_wrap(~variable, scales = "free") + labs(title = "Histogram of Variables")
table(data$withWater)
sum(data$crimeRate_pc == 0)
plot(data$crimeRate_pc)
data$crimeRate_pc == 0
head(data$crimeRate_pc)
sum(data$crimeRate_pc < 1)
ggplot(melt(data[,-3]), aes(value)) + geom_point(shape= 1) + facet_wrap(~variable, scales = "free") + labs(title = "Scatterplot of Variables")
?boxplot
?barplot
barplot(data$withWater)
sum(data$ageHouse == 100)
sum(data$ageHouse > 95)
hist(data$crimeRate_pc)
hist(log(data$crimeRate_pc))
hist(log(data$homeValue))
data2 <- data
data2$logCrimePC <- log(data2$crimeRate_pc)
hist(sqrt(data$crimeRate_pc))
hist(data$ageHouse)
hist(log(data$ageHouse))
ggplot(melt(data[,-3]), aes(value)) + geom_histogram(color = "black", fill = "white") + facet_wrap(~variable, scales = "free") + labs(title = "Histogram of Variables")
data2$logHomeValue <- log(data2$homeValue)
hist(data$ageHouse ^ 0.5)
hist(data$ageHouse ^ 0.3)
View(data2)
crimePC.value.plot <- ggplot(data2, aes(crimeRatePC, logHomeValue))
crimePC.value.plot = plot_scatterplot(crimePC.value.plot)
plot_scatterplot = function(pl) {
return(pl + geom_point(size = 1.5) + geom_smooth(method = "lm", alpha = 0.2) + theme(legend.key.size = unit(0.3, "cm")))
}
crimePC.value.plot <- ggplot(data2, aes(crimeRatePC, logHomeValue))
crimePC.value.plot = plot_scatterplot(crimePC.value.plot)
}
plot_scatterplot = function(pl) {
return(pl + geom_point(size=1.5) +
geom_smooth(method="lm", alpha=0.2) +
theme(legend.key.size=unit(.3, "cm")))
}
crimePC.value.plot <- ggplot(data2, aes(crimeRatePC, logHomeValue))
crimePC.value.plot = plot_scatterplot(crimePC.value.plot)
library(grid)
crimePC.value.plot <- ggplot(data2, aes(crimeRatePC, logHomeValue))
crimePC.value.plot = plot_scatterplot(crimePC.value.plot)
crimePC.value.plot
crimePC.value.plot <- ggplot(data2, aes(crimeRate_pc, logHomeValue))
crimePC.value.plot = plot_scatterplot(crimePC.value.plot)
crimePC.value.plot
nonRetail.value.plot <- ggplot(data2, aes(nonRetailBusiness, logHomeValue))
nonRetail.value.plot = plot_scatterplot(nonRetail.value.plot)
nonRetail.value.plot
ageHouse.value.plot <- ggplot(data2, aes(ageHouse, logHomeValue))
ageHouse.value.plot = plot_scatterplot(ageHouse.value.plot)
ageHouse.value.plot
distanceCity.value.plot <- ggplot(data2, aes(distanceToCity, logHomeValue))
distanceCity.value.plot = plot_scatterplot(distanceCity.value.plot)
distanceCity.value.plot
distanceHighway.value.plot <- ggplot(data2, aes(distanceToHighway, logHomeValue))
distanceHighway.value.plot = plot_scatterplot(distanceHighway.value.plot)
distanceHighway.value.plot
plot(data2$distanceToHighway)
data2$distanceToHighway <- as.factor(round(data2$distanceToHighway))
table(data2$distanceToHighway)
pupilTeacher.value.plot <- ggplot(data2, aes(pupilTeacherRatio, logHomeValue))
pupilTeacher.value.plot = plot_scatterplot(pupilTeacher.value.plot)
pupilTeacher.value.plot
lowIncome.value.plot <- ggplot(data2, aes(pctLowIncome, logHomeValue))
lowIncome.value.plot = plot_scatterplot(lowIncome.value.plot)
lowIncome.value.plot
lowIncome.value.plot <- ggplot(data2, aes(pctLowIncome, homeValue))
lowIncome.value.plot = plot_scatterplot(lowIncome.value.plot)
lowIncome.value.plot
pollution.value.plot <- ggplot(data2, aes(pollutionIndex, logHomeValue))
pollution.value.plot = plot_scatterplot(pollution.value.plot)
pollution.value.plot
nBedrooms.value.plot <- ggplot(data2, aes(nBedRooms, logHomeValue))
nBedrooms.value.plot = plot_scatterplot(nBedrooms.value.plot)
nBedrooms.value.plot
rm(list = ls())
series <- read.table("series02.txt")
series <- series$V1
par(mfrow = c(2,2))
plot.ts(series, col = "navy", xlab = "Time Period", ylab = "Values", main = "Time Series for Series 02")
hist(series, main = "Histogram of Values of Series 02")
acf(series, main = "ACF of Series 02")
pacf(series, main = "PACF of Series 02")
arfit1 <- auto.arima(series)
arfti1
arfit1
plot.ts(arfit1$residuals)
acf(arfit1$residuals)
