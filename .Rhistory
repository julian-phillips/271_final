arfit$asy.var
arfit$asy.var[2,2]
set.seed(898)
x3 <- arima.sim(n = 1000, list(ar = c(1.5, -.9), ma=0))
x3.arfit <- ar(x3, method = "mle") #AR estimates a series of AR models up to order 12 (by default)
x3.arfit$aic   # AICs of the fit models
sqrt(x3.arfit$asy.var) # asy. standard error
set.seed(898)
x3 <- arima.sim(n = 1000, list(ar = c(1.5, -.9), ma=0))
x3.arfit <- ar(x3, method = "mle") #AR estimates a series of AR models up to order 12 (by default)
sqrt(x3.arfit$asy.var) # asy. standard error
x3.arfit$asy.var
x3.arfit$ar + c(-2,2)*sqrt(x3.arfit$asy.var)
library(astsa)    # Time series package by Shummway and Stoffer
library(zoo)      # time series package
library(forecast)
library(quantmod) # Financial time series package
install.packages("quantmod")
library(quantmod)
theta = seq(-2,2,0.01)
rho = theta/(1+theta^2)
plot(theta, rho, xlab=expression(~~~theta),
ylab=expression(~~~theta/(1+theta^2)),
main = "Theoretical ACF of MA(1)")
set.seed(898)
ma1a <- arima.sim(list(order=c(0,0,1), ma=.9), n=100)
set.seed(898)
ma1b <- arima.sim(list(order=c(0,0,1), ma=-.9), n=100)
set.seed(898)
ma1c <- arima.sim(list(order=c(0,0,1), ma=.5), n=100)
set.seed(898)
ma1d <- arima.sim(list(order=c(0,0,1), ma=-.5), n=100)
str(ma1a)
hist(ma1a, ylab="value", main=(expression(MA(1)~~~theta==+.9)))
hist(ma1b, ylab="x", main=(expression(MA(1)~~~theta==-.9)))
hist(ma1c, ylab="x", main=(expression(MA(1)~~~theta==+.5)))
hist(ma1d, ylab="x", main=(expression(MA(1)~~~theta==-.5)))
plot(ma1a, ylab="value", main=(expression(MA(1)~~~theta==+.9)))
plot(ma1b, ylab="x", main=(expression(MA(1)~~~theta==-.9)))
plot(ma1c, ylab="x", main=(expression(MA(1)~~~theta==+.5)))
plot(ma1d, ylab="x", main=(expression(MA(1)~~~theta==-.5)))
par(mfrow(c(2,2)))
par(mfrow=c(2,2))
acf(ma1a,main="Fig1: ACF of MA1(ma=0.9)")
acf(ma1b,main="Fig2: ACF of MA1(ma=-0.9)")
acf(ma1c,main="Fig3: ACF of MA1(ma=0.5)")
acf(ma1d,main="Fig4: ACF of MA1(ma=-0.5)")
par(mfrow=c(2,2))
pacf(ma1a,main="Fig1: PACF of MA1(ma=0.9)")
pacf(ma1b,main="Fig2: PACF of MA1(ma=-0.9)")
pacf(ma1c,main="Fig3: PACF of MA1(ma=0.5)")
pacf(ma1d,main="Fig4: PACF of MA1(ma=-0.5)")
rm(list = ls())
set.seed(898)
ma2a1 <- arima.sim(list(order=c(0,0,2), ma=c(0.9,  0.4)), n=100)
set.seed(898)
ma2a2 <- arima.sim(list(order=c(0,0,2), ma=c(0.9, -0.4)), n=100)
set.seed(898)
ma2b1 <- arima.sim(list(order=c(0,0,2), ma=c(-.9, 0.4)), n=100)
set.seed(898)
ma2b2 <- arima.sim(list(order=c(0,0,2), ma=c(-.9, -0.4)), n=100)
set.seed(898)
ma2c1 <- arima.sim(list(order=c(0,0,2), ma=c(0.5, 0.4)), n=100)
set.seed(898)
ma2c2 <- arima.sim(list(order=c(0,0,2), ma=c(0.5, -0.4)), n=100)
set.seed(898)
ma2d1 <- arima.sim(list(order=c(0,0,2), ma=c(-0.5, 0.4)), n=100)
set.seed(898)
ma2d2 <- arima.sim(list(order=c(0,0,2), ma=c(-0.5, -0.4)), n=100)
?arima.sim
par(mfrow = c(2,2))
plot(ma2a1, ylab="simulated value", main="MA2(0.9, 0,4)")
plot(ma2a2, ylab="simulated value", main="MA2(0.9,-0.4)")
plot(ma2b1, ylab="simulated value", main="MA2(-0.9,0.4)")
plot(ma2b2, ylab="simulated value", main="MA2(-0.9,-0.4)")
par(mfrow=c(3,2))
plot(ma1a,  ylab="simulated value", main=(expression(MA(1)~~~theta==+.9)))
acf(ma1a,  ylab="Autocorrelation", main="ACF of MA1(0.9)")
plot(ma2a1, ylab="simulated value", main="MA2(0.9, 0,4)")
acf(ma2a1, ylab="Autocorrelation", main="ACF of MA2(0.9, 0,4)")
plot(ma2a2, ylab="simulated value", main="MA2(0.9,-0.4)")
acf(ma2a2, ylab="Autocorrelation value", main="ACF MA2(0.9,-0.4)")
par(mfrow=c(2,2))
plot(ma2c2, ylab="simulated value", main="MA2(0.5,-0.4)")
hist(ma2c2, col="grey", ylab="simulated value", main="MA2(0.5,-0.4)")
acf(ma2c2, ylab="simulated value", main="MA2(0.5,-0.4)")
pacf(ma2c2, ylab="simulated value", main="MA2(0.5,-0.4)")
rm(list = ls())
ma2.fit <- arima(ma2c2, order=c(0,0,2))
set.seed(898)
ma2c2 <- arima.sim(list(order=c(0,0,2), ma=c(0.5, -0.4)), n=100)
ma2.fit <- arima(ma2c2, order=c(0,0,2))
summary(ma2.fit)
head(cbind(ma2c2, fitted(ma2.fit), ma2.fit$resid),10)
df<-data.frame(cbind(ma2c2, fitted(ma2.fit), ma2.fit$resid))
library(stargazer)
stargazer(df, type="text")
summary(ma2.fit$resid)
par(mfrow=c(2,2))
plot.ts(ma2.fit$resid, main="Residual Series",
ylab="residuals", col="navy")
hist(ma2.fit$resid, col="gray", main="Residuals")
acf(ma2.fit$resid, main="ACF of Residuals")
pacf(ma2.fit$resid, main="PACF of Residuals")
Box.test(ma2.fit$resid, type="Ljung-Box") # Box-Pierce test
set.seed(898)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
acf(x, main="")
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
acf(x, main="")
title("Autocorrelation of Time Series")
pacf(x, main="")
title("Partial Autocorrelation of Time Series")
arfit <- ar(x, method = "mle")
arfit$order
arfit$ar
sqrt(arfit$asy.var.coef)
CI <- arfit$ar + c(-2, 2) * sqrt(arfit$asy.var.coef)
polyroot(arfit$ar)
polyroot(c(1,-1,-0.4))
polyroot(c(1.0,0.5,0.25))
acf(arfit$resid[3:100], main="Autocorrelation of Time Series Residuals")
set.seed(898)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
arfit <- ar(x)
arfit$order
arfit$ar
arfit <- ar(x, method = "yw")
arfit$ar
arfit <- ar(x, method = "osl")
arfit <- ar(x, method = "ols")
arfit$order
arfit$ar
arfit <- ar(x, method = "mle", order = c(2, 0, 0))
?ar
set.seed(898)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
arfit$resid
arfit <- ar(x, method = "mle")
arfit$resid
arfit2 <- ar(x, method = "ols")
arfit2$resid
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
arfit <- ar(x, method = "mle")
arfit
set.seed(100)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
acf(x, main="")
pacf(x, main="")
arfit <- ar(x, method = "ols")
arfit$order
set.seed(100)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
set.seed(10)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
set.seed(150)
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
set.seed(100)
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
set.seed(100)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
acf(x, main="")
title("Partial Autocorrelation of Time Series")
pacf(x, main="")
acf(x, main="")
arfit <- ar(x, method = "mle")
arfit$order
arfit$ar
set.seed(100)
set.seed(100)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
arfit <- ar(x, method = "mle")
arfit$order
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
set.seed(200)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
plot.ts(x, xlab = "Simulated time period", ylab = "Simulated Value", main = "Simulated Time Series Model")
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
acf(x, main="")
pacf(x, main="")
arfit <- ar(x, method = "mle")
arfit$order
set.seed(898)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
arfit <- ar(x, method = "mle")
arfit$order
set.seed(100)
x <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma=0))
hist(x, xlab = "Simulated Value", main = "Histogram of Simulated Time Series")
acf(x, main="")
arfit <- ar(x, method = "mle")
arfit$order
arfit2 <- ar(x, method = "ols")
arfit2$oorder
arfit2$order
arfit3 <- ar(x, method = "yw")
arfit3$order
arfit$ar
sqrt(arfit$asy.var.coef)
arfit$ar + c(-2, 2) * sqrt(arfit$asy.var.coef)
5/6
set.seed(898)
x2 <- arima.sim(n = 100, list(ar = c(5/6, -1/6), ma = 0))
arfit2 <- ar(x2, method = "mle")
arfit2$order
arfit$ar
arfit2$ar
sqrt(arfit$asy.var.coef)
sqrt(arfit2$asy.var.coef)
polyroot(c(1, -arfit$ar))
arfit$aic
arfit$resid
acf(arfit$resid[2:100], main="Autocorrelation of Time Series Residuals")
hist(arfit$resid)
plot.ts(arfit$resid, main="Simulated Random Noise Time Series",col="blue", ylab="Values", xlab="Simulated Time #Period")
qqPlot(arfit$resid, main="QQ Plot of Residuals", ylab="Residuals")
library(ggplot2)
library(gridExtra)
library(grid)
library(car)
qqPlot(arfit$resid, main="QQ Plot of Residuals", ylab="Residuals")
#Autocorrelation Function of Residuals
acf(arfit$resid[2:100], main="Autocorrelation of Time Series Residuals")
#Histogram of Residuals
hist(arfit$resid)
#Time Series of Residuals
plot.ts(arfit$resid, main="Simulated Random Noise Time Series",col="blue", ylab="Values", xlab="Simulated Time #Period")
#QQ Plot of residuals
qqPlot(arfit$resid, main="QQ Plot of Residuals", ylab="Residuals")
resids <- arfit$resid[2:100] #subsetting to remove NA
acf(resids, main="Autocorrelation of Time Series Residuals")
hist(arfit$resids)
hist(resids)
par(mfrow = c(2,2))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
resids <- arfit$resid[2:100] #subsetting to remove NA
par(mfrow = c(2,2))
#Autocorrelation Function of Residuals
acf(resids, main="Autocorrelation of Time Series Residuals")
#Partial Autocorrelation Function of Residuals
pacf(resids, main = "Partial Autocorrelation of Time Series Residuals")
par(mfrow = c(2,2))
#Histogram of Residuals
hist(resids)
#QQ Plot of residuals
qqPlot(resids, main="QQ Plot of Residuals", ylab="Residuals")
par(mfrow = c(1,2))
#Histogram of Residuals
hist(resids)
#QQ Plot of residuals
qqPlot(resids, main="QQ Plot of Residuals", ylab="Residuals")
#Time Series of Residuals
par(mfrow = c(1,2))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
#Time Series of Residuals
par(mfrow = c(2,1))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
par(mfrow = c(2,1))
#Histogram of Residuals
hist(resids)
#QQ Plot of residuals
qqPlot(resids, main="QQ Plot of Residuals", ylab="Residuals")
resids <- arfit$resid[2:100] #subsetting to remove NA
par(mfrow = c(2,1))
#Autocorrelation Function of Residuals
acf(resids, main="Autocorrelation of Time Series Residuals")
#Partial Autocorrelation Function of Residuals
pacf(resids, main = "Partial Autocorrelation of Time Series Residuals")
#Time Series of Residuals
par(mfrow = c(2,1))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
par(mfrow = c(1,1))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
par(mfrow = c(2,2))
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
par(mfrow = c(1,2))
acf(resids, main="Autocorrelation of Time Series Residuals")
par(mfrow = c(2,1))
acf(resids, main="Autocorrelation of Time Series Residuals")
pacf(resids, main = "Partial Autocorrelation of Time Series Residuals")
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
hist(resids, main = "Histogram of TS Residuals")
qqPlot(resids, main="QQ Plot of Residuals", ylab="Residuals")
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
par(mfrow = c(2,1))
acf(resids, main="Autocorrelation of Time Series Residuals")
#Partial Autocorrelation Function of Residuals
pacf(resids, main = "Partial Autocorrelation of Time Series Residuals")
plot.ts(resids, main="Simulated Series Residuals",col="blue", ylab="Values", xlab="Simulated Time #Period")
plot(rnorm(100), type="l", main="Gaussian White Noise")
hist(resids, main = "Histogram of TS Residuals")
#QQ Plot of residuals
qqPlot(resids, main="QQ Plot of Residuals", ylab="Residuals")
qqnorm(resids)
par(mfrow = c(1,1))
qqnorm(resids)
CI <- arfit$ar + c(-2, 2) * sqrt(arfit$asy.var.coef)
CI
5/6
-1/6
polyroot(c(1, -arfit$ar))
arfit
library(tseries)
?ad
?adf.test
setwd("Documents/271 Final")
library(ggplot2)
library(car)
library(reshape2)
library(grid)
library(astsa)
library(forecast)
library(quantmod)
library(fGarch)
library(tseries)
library(gridExtra)
library(scales)
library(plyr)
library(GGally)
library(sandwich)
library(lmtest)
data <- read.csv("houseValueData.csv")
data$withWater <- as.factor(data$withWater)
data = subset(data, homeValue!=1125000)
data$loghomeValue = log(data$homeValue)
data$crimeRate_zero[data$crimeRate_pc < 1.0] <- 1
data$crimeRate_zero[data$crimeRate_pc >= 1.0] <- 0
data$crimeRate_zero <-as.factor(data$crimeRate_zero)
data$olderneighborhood [data$ageHouse >= 90.00] <- 1
data$olderneighborhood [data$ageHouse < 90.00] <- 0
data$olderneighborhood <- as.factor(data$olderneighborhood )
data$newerneighborhood[data$ageHouse <= 10.00] <- 1
data$newerneighborhood[data$ageHouse > 10.00] <- 0
data$newerneighborhood<- as.factor(data$newerneighborhood)
lmlog = lm(loghomeValue ~ crimeRate_pc+crimeRate_zero+olderneighborhood +newerneighborhood +withWater+ageHouse+distanceToCity+pctLowIncome+pollutionIndex+nBedRooms, data=data)
lmlog = lm(loghomeValue ~ crimeRate_pc+withWater+ageHouse+distanceToCity+pctLowIncome+pollutionIndex+nBedRooms, data=data)
lmlog = lm(loghomeValue ~ crimeRate_pc+distanceToCity+pctLowIncome+pollutionIndex+nBedRooms, data=data)
plot(lmlog)
lm = lm(homeValue ~ crimeRate_pc+distanceToCity+pctLowIncome+pollutionIndex+nBedRooms, data=data)
cov(crimeRate_pc, lm$residuals)
cov(data$crimeRate_pc, lm$residuals)
cov(data$distanceToCity, lm$residuals)
cov(data$pctLowIncome, lm$residuals)
cov(data$pollutionIndex, lm$residuals)
cov(data$nBedRooms, lm$residuals)
cov(data$crimeRate_pc, lmlog$residuals)
cov(data$distanceToCity, lmlog$residuals)
cov(data$pctLowIncome, lmlog$residuals)
cov(data$pollutionIndex, lmlog$residuals)
cov(data$nBedRooms, lmlog$residuals)
rm(list = ls())
series <- read.table("series02.txt")
series <- ts(series$V1)
?garchFit
garch.fit <- garchFit(~garch(1,1), includeMean = FALSE, data = series)
garch.fit <- garchFit(~garch(1,1), includeMean = FALSE, data = series, trace = FALSE)
garch.fit <- garchFit(~garch(1,1), data = series, trace = FALSE, include.mean = FALSE)
garch.fit
par(mfrow(2,1))
par(mfrow = c(2,1))
acf(residuals(garch.fit), main = "Residuals of Garch Model")
acf(residuals(garch.fit)^2, main = "Residuals of Garch Model Squared")
acf(residuals(garch.fit), standardize = TRUE, main = "Residuals of Garch Model")
acf(residuals(garch.fit, standardize = TRUE), main = "Residuals of Garch Model")
dev.off()
garch.fit <- garchFit(~garch(1,1), data = series, trace = FALSE, include.mean = FALSE)
garch.fit
par(mfrow = c(2,1))
resids <- residuals(garch.fit, standardize = TRUE)
acf(residuals(garch.fit, standardize = TRUE), main = "Residuals of Garch Model")
acf(residuals(garch.fit, standardize = TRUE)^2, main = "Residuals of Garch Model Squared")
preds <- forecast(garch.fit, n.ahead = 24)
preds <- predict(garch.fit, n.ahead = 24)
lower <- preds$meanForecast - 1.96 * preds$meanError
upper <- preds$meanForecast + 1.96 * preds$meanError
cbind(lower, preds$meanForecast, upper)
plot.ts(c(series, preds$meanForecast), main = "Forecast Plot")
par(mfrow = c(1,1))
plot.ts(c(series, preds$meanForecast), main = "Forecast Plot")
lines(c(series, lower), col = "blue")
lines(c(rep(NA, 792), lower), col = "blue")
par(mfrow = c(1,1))
plot.ts(c(series, preds$meanForecast), main = "Forecast Plot")
lines(c(rep(NA, 792), lower), col = "blue")
lines(c(rep(NA, 792), upper), col = "blue")
series <- read.csv("series03.csv")
series <- ts(series)
model <- arima(log(series), order = c(0, 2, 1))
model
t(confint(model))
rm(list = ls())
series <- read.csv("series03.csv")
series <- ts(series)
series <- read.csv("series03.csv")
View(series)
series <- ts(series$X9.88)
model <- arima(log(series), order = c(0, 2, 1))
resids <- model$residuals
plot.ts(resids, main = "Residuals of ARIMA Model")
hist(resids, main = "Histogram of Residuals")
acf(resids, main = "ACF of Residuals")
pacf(resids, main = "PACF of Residuals")
par(mfrow = c(2,1))
acf(resids, main = "ACF of Residuals")
acf(resids^2, main = "ACF of Squared Residuals")
garch.fit <- garchFit(~garch(1,1), data = resids, include.mean = FALSE, trace = FALSE)
garch.fit
acf(residuals(garch.fit, standardize = TRUE),  main = "ACF of GARCH Residuals")
acf(residuals(garch.fit, standardize = TRUE)^2, main = "ACF of GARCH Residuals Squared")
Box.test(residuals(garch.fit, standardize = TRUE), type = "Ljung-Box")
std <- predict(garch.fit, n.ahead = 24)
preds <- forecast(model, n.ahead = 24)
preds
preds[1]
preds[,1]
preds$Forecast
class(preds)
preds$fitted
lower <- c(preds[2247:2256] - 1.96 * std$meanError)
point <- preds[2247:2256]
lower <- c(preds$fitted[2247:2256] - 1.96 * std$meanError)
point <- preds$fitted[2247:2256]
preds$mean
preds
preds <- forecast(model, n.ahead = 24)
?forecast
preds <- forecast(model, h = 24)
preds$mean
preds
lower <- c(preds$mean - 1.96 * std$meanError)
upper <- c(preds$mean + 1.96 * std$meanError)
cbind(lower, preds$mean, upper)
par(mfrow = c(1,1))
plot.ts(c(series, preds$mean), xlab = "Time Period", ylab = "Value", main = "Time Series Plot with Forecast")
tail(series)
forecast(model, h = 24)
model <- arima(log(series), order = c(0, 2, 1))
plot.ts(c(diff(log(series), d = 2), preds$mean), xlab = "Time Period", ylab = "Value", main = "Time Series Plot with Forecast")
rm(list = ls())
series <- read.csv("series04.csv")
series <- ts(series$X25182, frequency = 12)
mod <- auto.arima(log(series), d = 1, D = 1)
forecast(mod, h = 24)
tail(series)
tail(log(series))
preds <- forecast(mod, h = 24)
exp(preds$mean)
plot.ts(c(series, exp(preds))
)
preds <- forecast(mod, h = 24)
preds
exp(preds$mean)
preds$lower
preds[,2]
preds$lower[,2]
lower <- exp(preds$mean - 1.96 * preds$lower[,2])
cbind(lower, exp(preds$mean), upper)
upper <- exp(preds$mean + 1.96 * preds$upper[,2])
cbind(lower, exp(preds$mean), upper)
plot.ts(c(series, lower))
plot.ts(c(series, upper))
preds$mean - 1.96 * preds$lower[,2]
exp(preds$mean - preds$lower)
exp(preds$mean - preds$lower[,2])
lower <- exp(preds$mean - preds$lower[,2])
upper <- exp(preds$mean + preds$upper[,2])
cbind(lower, exp(preds$mean), upper)
exp(preds$mean - preds$lower)
exp(preds$mean - preds$lower)[,2]
exp(preds$mean - preds$lower[,2])
preds <- forecast(mod, h = 24)
lower <- exp(preds$mean - preds$lower[,2])
upper <- exp(preds$mean + preds$upper[,2])
upper
tail(series)
lower <- preds$mean - preds$lower[,2]
upper <- preds$mean + preds$upper[,2]
upper
exp(preds$mean)
exp(preds$mean) - lower[,2]
exp(preds$mean) - preds$lower[,2]
exp(preds$mean) - preds$upper[,2]
